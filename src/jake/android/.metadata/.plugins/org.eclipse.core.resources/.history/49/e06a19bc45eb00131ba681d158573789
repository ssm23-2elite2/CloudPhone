package org.secmem232.cloudphone;

import java.io.ByteArrayOutputStream;
import java.util.List;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Configuration;
import android.graphics.ImageFormat;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.hardware.Camera;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Camera.Size;
import android.os.Build;
import android.util.Log;
import android.view.Display;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.WindowManager;

/**
 * This class assumes the parent layout is RelativeLayout.LayoutParams.
 */
@SuppressLint("NewApi")
public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {
	private static boolean DEBUGGING = true;
	private static final String LOG_TAG = "CameraPreview";
	private static final String CAMERA_PARAM_ORIENTATION = "orientation";
	private static final String CAMERA_PARAM_LANDSCAPE = "landscape";
	private static final String CAMERA_PARAM_PORTRAIT = "portrait";
	protected Context mContext;
	private SurfaceHolder mHolder;
	protected Camera mCamera;
	protected List<Camera.Size> mPreviewSizeList;
	protected List<Camera.Size> mPictureSizeList;
	protected Camera.Size mPreviewSize;
	protected Camera.Size mPictureSize;
	private int mSurfaceChangedCallDepth = 0;
	private int mCameraId;
	private LayoutMode mLayoutMode;
	private int mCenterPosX = -1;
	private int mCenterPosY;
	
	private PreviewReadyCallback mPreviewReadyCallback = null;
	private CameraPreviewListener mCameraPreviewListener = null;
	
	private final String LOG = "CameraPreview";
	public static enum LayoutMode {
		FitToParent, // Scale to the size that no side is larger than the parent
		NoBlank // Scale to the size that no side is smaller than the parent
	};

	public interface PreviewReadyCallback {
		public void onPreviewReady();
	}
	
	public interface CameraPreviewListener {
		public void onPreview(byte[] image);
	}

	static { 
        System.loadLibrary( "yuv420sp2rgb" );       
    }
	
	public native void yuv420sp2rgb(byte[] in, int width, int height, int textureSize, byte[] out);
	
	/**
	 * State flag: true when surface's layout size is set and surfaceChanged()
	 * process has not been completed.
	 */
	protected boolean mSurfaceConfiguring = false;

	@SuppressLint("NewApi")
	public CameraPreview(Context context, int cameraId, LayoutMode mode) {
		super(context); // Always necessary
		Log.w(LOG, "cameraId :" + cameraId);
		mContext = context;
		mLayoutMode = mode;
		mHolder = getHolder();
		mHolder.addCallback(this);
		mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
		
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
			if (Camera.getNumberOfCameras() > cameraId) {
				mCameraId = cameraId;
			} else {
				mCameraId = 0;
			}
		} else {
			mCameraId = 0;
		}

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
			mCamera = Camera.open(mCameraId);
		} else {
			mCamera = Camera.open();
		}
		Camera.Parameters cameraParams = mCamera.getParameters();
		mPreviewSizeList = cameraParams.getSupportedPreviewSizes();
		mPictureSizeList = cameraParams.getSupportedPictureSizes();
	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		Log.w(LOG, "surfaceCreated");
		try {
			mPreviewSize = mCamera.new Size(240,320);
			mPictureSize = mCamera.new Size(240,320);
			mCamera.getParameters().setPreviewSize(mPreviewSize.width, mPreviewSize.height);
			mCamera.getParameters().setPictureSize(mPictureSize.width, mPictureSize.height);
			//mCamera.getParameters().setPictureFormat(ImageFormat.)
			mCamera.setPreviewDisplay(holder);
			mCamera.setPreviewCallback(mPreviewCallBack);
			mCamera.setOneShotPreviewCallback(mPreviewCallBack);
			mCamera.startPreview();
		} catch (Exception e) {
			mCamera.setPreviewCallback(null);
			mCamera.release();
			mCamera = null;
		}
	}
	
	protected void configureCameraParameters(Camera.Parameters cameraParams, boolean portrait) {
		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) { // for 2.1 and before
			if (portrait) {
				cameraParams.set(CAMERA_PARAM_ORIENTATION, CAMERA_PARAM_PORTRAIT);
			} else {
				cameraParams.set(CAMERA_PARAM_ORIENTATION, CAMERA_PARAM_LANDSCAPE);
			}
		} else { // for 2.2 and later
			int angle;
			Display display = ((WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
			switch (display.getRotation()) {
			case Surface.ROTATION_0: // This is display orientation
				angle = 90; // This is camera orientationc
				break;
			case Surface.ROTATION_90:
				angle = 0;
				break;
			case Surface.ROTATION_180:
				angle = 270;
				break;
			case Surface.ROTATION_270:
				angle = 180;
				break;
			default:
				angle = 90;
				break;
			}
			Log.v(LOG_TAG, "angle: " + angle);
			mCamera.setDisplayOrientation(angle);
		}

		cameraParams.setPreviewSize(mPreviewSize.width, mPreviewSize.height);
		cameraParams.setPictureSize(mPictureSize.width, mPictureSize.height);

		mCamera.setParameters(cameraParams);
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
		stop();
	}

	public void stop() {
		if (null == mCamera) {
			return;
		}
		mCamera.stopPreview();
		mCamera.setPreviewCallback(null);
		mCamera.release();
		mCamera = null;
	}

	public boolean isPortrait() {
		return (mContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT);
	}

	
	private Camera.PreviewCallback mPreviewCallBack = new PreviewCallback() {
		@Override
		public void onPreviewFrame(byte[] data, Camera camera) {
			//byte[] out = new byte[data.length];
			Camera.Parameters parameters = camera.getParameters();
			Size size = parameters.getPreviewSize();
			Log.w(LOG, "onPreviewFrame" + data.length + ", " + size.width + ", " + size.height);
			//yuv420sp2rgb(data, size.width, size.height, 256, out);
			
			YuvImage image = new YuvImage(data, ImageFormat.NV21, size.width, size.height, null);
			Rect rectangle = new Rect();
			rectangle.bottom = size.height;
			rectangle.top = 0;
			rectangle.left = 0;
			rectangle.right = size.width;
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			image.compressToJpeg(rectangle, 50, out);
			
			
			if(mCameraPreviewListener != null) {
				mCameraPreviewListener.onPreview(out.toByteArray());
				camera.setPreviewCallback(this);
			}
		}
	};
	
	public Camera.Size getPreviewSize() {
		return mPreviewSize;
	}

	public void setOnPreviewReady(PreviewReadyCallback cb) {
		mPreviewReadyCallback = cb;
	}
	
	public void setCameraPreviewListener(CameraPreviewListener listener) { 
		mCameraPreviewListener = listener;
	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		// TODO Auto-generated method stub
		
	}
}
