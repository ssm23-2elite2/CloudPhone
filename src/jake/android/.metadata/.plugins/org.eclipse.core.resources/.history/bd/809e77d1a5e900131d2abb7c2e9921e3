package org.secmem232.cloudphone;

import org.secmem232.cloudphone.intent.CloudPhoneIntent;
import org.secmem232.cloudphone.util.Util;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;

public class CloudPhone extends Activity {
	private final static String LOG = "CloudPhone";
	
	private final String SERVER_IP = "211.189.20.137";
	private final int SERVER_PORT = 3737;
	private ICloudPhone mCloudPhoneSvc;
	
	private ServiceConnection conn = new ServiceConnection() {
		@Override
		public void onServiceConnected(ComponentName name, IBinder service) {
			Log.w(LOG, "onServiceConnected");
			mCloudPhoneSvc = ICloudPhone.Stub.asInterface(service);
			try { 
				if(!mCloudPhoneSvc.isConnected()) {
					onConnectRequested(SERVER_IP, SERVER_PORT);
				} else {
					
				}
			} catch (Exception e) {
				
			}
		}
		
		@Override
		public void onServiceDisconnected(ComponentName name) {
			Log.w(LOG, "onServiceDisconnected");
			mCloudPhoneSvc = null;
		}
		
	};
	
	private BroadcastReceiver serviceConnReceiver = new BroadcastReceiver(){
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if(CloudPhoneIntent.ACTION_CONNECTED.equals(action)){
				Log.w(LOG, "serviceConnReceiver.ACTION_CONNECTED");
			} else if(CloudPhoneIntent.ACTION_DEVICE_OPEN_FAILED.equals(action)) {
				Log.w(LOG, "serviceConnReceiver.ACTION_DEVICE_OPEN_FAILED");
			} else if(CloudPhoneIntent.ACTION_DISCONNECTED.equals(action)) {
				Log.w(LOG, "serviceConnReceiver.ACTION_DISCONNECTED");
			} else if(CloudPhoneIntent.ACTION_INTERRUPTED.equals(action)) {
				Log.w(LOG, "serviceConnReceiver.ACTION_INTERRUPTED");
			} else if(CloudPhoneIntent.ACTION_CONNECTION_FAILED.equals(action)){
				Log.w(LOG, "serviceConnReceiver.ACTION_CONNECTION_FAILED");
			}
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.layout_main);
		Log.w(LOG, "onCreate");
		
		tryConnect();
	}

	@Override
	protected void onResume() {
		super.onResume();
		Log.w(LOG, "onResume");
		IntentFilter filter = new IntentFilter();
		filter.addAction(CloudPhoneIntent.ACTION_CONNECTED);
		filter.addAction(CloudPhoneIntent.ACTION_DEVICE_OPEN_FAILED);
		filter.addAction(CloudPhoneIntent.ACTION_CONNECTION_FAILED);
		filter.addAction(CloudPhoneIntent.ACTION_DISCONNECTED);
		filter.addAction(CloudPhoneIntent.ACTION_INTERRUPTED);
		
		registerReceiver(serviceConnReceiver, filter);
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		Log.w(LOG, "onPause");
		unregisterReceiver(serviceConnReceiver);
	}
	
	public void onConnectRequested(String ip, int port) {
		Log.w(LOG, "onConnectRequested");
		
		try {
			mCloudPhoneSvc.connect(ip, port);
		} catch (Exception e) {
			Log.e("TAG", "Connection Failed\n");
			e.printStackTrace();
		}
	}
	
	@Override
	public void onBackPressed() {
		Log.w(LOG, "onBackPressed");
		
		android.os.Process.killProcess(android.os.Process.myPid());
		super.onBackPressed();
	}
	
	private void tryConnect() {
		Log.w(LOG, "tryConnect");
		
		if(!Util.Services.isServiceAliveU(CloudPhone.this)){
			Util.Services.startPassUService(CloudPhone.this);
		}
		bindService(new Intent(this, CloudPhoneService.class), conn, Context.BIND_AUTO_CREATE);
	}
}
