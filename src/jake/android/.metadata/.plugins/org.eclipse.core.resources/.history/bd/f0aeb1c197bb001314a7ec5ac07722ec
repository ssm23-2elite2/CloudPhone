package com.ssm232.elite.cloudphonetest;

import android.app.Service;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import android.view.WindowManager;

public class CloudPhoneService extends Service {
	private final String LOG = "CloudPhoneService";
	public enum ServiceState{IDLE, CONNECTING, CONNECTED};
	private CloudPhoneSocket mSocket;
	private static ServiceState mState = ServiceState.IDLE;

	private IBinder mBinder = new ICloudPhone.Stub() {
		@Override
		public boolean isConnected() throws RemoteException {
			Log.w(LOG, "isConnected");
			return (mSocket != null && mSocket.isConnected()) ? true : false;
		}

		@Override
		public String getConnectionStatus() throws RemoteException {
			Log.w(LOG, "getConnectionStatus");
			return mState.name();
		}

		@Override
		public void disconnect() throws RemoteException {
			new AsyncTask<Void, Void, Void>(){
				@Override
				protected Void doInBackground(Void... params) {
					if(D.D) Log.w(LOG, "disconnect");
					// Close input device
					mInputHandler.close();
					mSocket.disconnect();
					mState = ServiceState.IDLE;
					return null;
				}
			}.execute();
		}

		@Override
		public void connect(final String ip, final int port) throws RemoteException {
			new AsyncTask<Void, Void, Void>() {
				@Override
				protected Void doInBackground(Void... params) {
					Log.w(LOG, "connect");
					
					// Start connection and receive events from server
					if( mSocket.connect(ip, port) == true ) {
						mInputHandler.open();					
						
						//Send devices resolution to host for coordinate transformation;
						if(mSocket != null && mSocket.isConnected()){
							mState = ServiceState.CONNECTING;
							sendBroadcast(new Intent(PassUIntent.ACTION_CONNECTED));
							
							//mSocket.sendDeviceInfo(getApplicationContext().getResources().getDisplayMetrics());
						}
					}
					return null;
				}
			}.execute();
		}
	};
	
	@Override
	public IBinder onBind(Intent intent) {
		Log.w(LOG, "onBind");
		return mBinder;
	}

	public ServiceState getConnectionState() {
		Log.w(LOG, "getConnectionState");
		return mState;
	}

	@Override
	public void onCreate() {
		super.onCreate();
		Log.w(LOG, "onCreate");
		AR.getInstance().m_Service = this;

		mInputHandler = new InputHandler(PassUService.this);
		mSocket = new PassUSocket(this);
		mSocket.setVirtualEventListener(this);
		mSocket.setAddOptionListener(this);
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		if(D.D) Log.w(LOG, "onStartCommand");
		return super.onStartCommand(intent, flags, startId);
	}

	@Override
	public void onDestroy() {
		if(D.D) Log.w(LOG, "onDestroy");
		AR.getInstance().m_Service = null;
		onViewInit();
		HideCursor();
		
		if(mMouseView != null) {
			((WindowManager) getSystemService(WINDOW_SERVICE)).removeView(mMouseView);
			mMouseView = null;
		}
		super.onDestroy();
	}
}
