<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAAAAABoBQAANgAAACAgAAAAAAAAqAgAAJ4FAAAwMAAAAAAAAKgOAABGDgAAKAAAABAA
        AAAgAAAAAQAIAAAAAABAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8Af39/AMDAwAA+Pj4AoKCgAF9f
        XwAfHx8A4uLiANDQ0ABOTk4ADw8PAC4uLgBwcHAA8fHxAK6urgCKiooAlpaWAEZGRgC2trYAVlZWAPj4
        +AAHBwcA6enpACYmJgDb29sAycnJAGZmZgB3d3cAGRkZAKampgAUFBQA1tbWADMzMwA5OTkAhYWFAAsL
        CwDt7e0AQkJCAEpKSgBbW1sAampqAPv7+wD19fUAAwMDACkpKQDGxsYAw8PDAL29vQCrq6sAo6OjAGJi
        YgCZmZkAc3NzAHp6egD9/f0ACQkJAPPz8wANDQ0A5+fnABsbGwDd3d0AKysrANTU1AAwMDAAzs7OADw8
        PABEREQAUFBQAFRUVABYWFgAiIiIAHV1dQB8fHwA/v7+AAEBAQD6+voA+fn5AAYGBgAKCgoA8vLyAAwM
        DADs7OwAEBAQAOPj4wDc3NwA19fXANXV1QAtLS0Az8/PAMrKygA6OjoAwsLCAENDQwDBwcEAvr6+AEdH
        RwCtra0AXFxcAKWlpQBjY2MAoqKiAKGhoQCfn58AmJiYAHh4eAB9fX0Afn5+AIaGhgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQEBAQEBAQEBAQEBAQE/
        BlhDalkBAQEBAQEBAQFHHwAAAABRawEBAQEBATdkS1MnbAVIWE8zAQEBAQEcTltBARBHAUwCTmkBAQEu
        UwQrAWc4OGgBAQILXgEBA081AQEzAABEAQFJT1oBAQFGHVABZAAAKAEaLDMgAQ4NVx0oAS9PCy8lLQwX
        ISMKGAETFhQ9YTIJGDxcTRACHlZhZhE4FmBdOiIXAyZMKgEVJCMBZQQ+Emc7DysmVAEBDhs5YjQBO1JW
        OQdWDgEBAQEBGR9faDYwQAE1AwEBAQEBATkRAUUpCEJNAQEBAQEBAQEBAQExYzdVSgEBAQEBAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgA
        AAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AICAgABAQEAAwMDAACAg
        IACgoKAAYGBgAODg4AAQEBAA0NDQADAwMACwsLAAUFBQAJCQkABwcHAA8PDwAAgICADo6OgAGBgYAMjI
        yAA4ODgAuLi4AEhISACoqKgAWFhYAJiYmAB4eHgA+Pj4ACcnJwDX19cAZ2dnAImJiQAEBAQA9PT0AAwM
        DADs7OwAFBQUAOTk5ADc3NwAKysrAMzMzAA0NDQAvLy8AERERAC0tLQATExMAKysrABcXFwApKSkAJyc
        nABra2sAdHR0AIWFhQB8fHwA/Pz8ABsbGwDU1NQAU1NTAJOTkwACAgIABgYGAPb29gAKCgoA8vLyAA4O
        DgDu7u4AEhISAOrq6gAWFhYA5ubmAOLi4gAdHR0A3t7eACIiIgAlJSUAKSkpAM7OzgAuLi4AysrKADIy
        MgA2NjYAwsLCADo6OgC+vr4APj4+AEJCQgC2trYAsrKyAK6urgBOTk4AqqqqAKampgCioqIAYmJiAGlp
        aQBtbW0Ajo6OAHJycgCHh4cAg4ODAHp6egD+/v4AAQEBAPv7+wADAwMA+fn5AAUFBQD39/cABwcHAPPz
        8wAJCQkACwsLAO/v7wANDQ0A7e3tAA8PDwDr6+sAERERAOnp6QATExMA5+fnABUVFQDl5eUAFxcXAOPj
        4wAaGhoA4eHhAN/f3wAeHh4A3d3dAB8fHwDb29sAISEhANbW1gAmJiYA1dXVANPT0wAqKioA0dHRACws
        LADPz88ALy8vAM3NzQAxMTEAMzMzAMnJyQA1NTUAx8fHADk5OQDBwcEAv7+/AD8/PwC7u7sARUVFALe3
        twBHR0cAtbW1AElJSQCzs7MAS0tLALGxsQCvr68AT09PAFFRUQBSUlIAqampAKenpwBXV1cAo6OjAFtb
        WwCfn58AX19fAJ2dnQCbm5sAmZmZAJKSkgCRkZEAbm5uAI+PjwBzc3MAioqKAHV1dQB3d3cAhoaGAIKC
        ggB9fX0AgYGBAH9/fwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ8BAQEBAQcBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AwEBAQEBAgQBAQEBAQEBAQEBAQEBAQEBAQoLmKMNEAGDmI4GAQEMDQEBAQEBAQEBAQEBAQEBAQEBgHEB
        AQYCAZgBAXQBAQMDCAEBAQEBAQEBAQEBAQEBAQEBAQoGC6IBmAEBmAEIDZcPAQEBAQEBAQEBAQEBAQEB
        AQEDA7yNAQEFgHEAAQ+XAQMQAQEBAQEBAQEBAQEBAQEBCgMBAQEBAay8mJcBrAEBopcBAQEBAQEBAQEB
        AQEBAQEBAw8CAwQBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBjZeAAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQqwpVFVVhk2n01oAQEBAQEBAQEBAQEBAQEBAQEBQK1aegBpaWk8AGkACZo7RAEB
        AQEBAQEBAQEBAQEBAZsoIwAAITwAAAAAAAAAAD+DnQEBAQEBAQEBAQEBAW6odgAAPDiFU14gXWFkqh04
        AABDMCIBAQEBAQEBAQFJkwA9PHqylAEBapmdNwEBAZIffmcAFUcBAQEBAQEBCCoAZz86JwEBAVSMRXhO
        WQEBAQEUmGlnk38BAQEBAXWeAGt4DgEBAQFzkAA9awBQdwEBAQE+Xm0AVUYBAQEBBBNpAC4BAQEBAVJv
        ZzxnAACmAQEBAQEOZzwjjwEBAQEBtnAAhYYBAQEBGgA8AGk8ADQBAQEBVzgAI2EBAQEBAQEBpREADQEB
        AQGmPWdtACEAqwEBASlFABEzZjEBAQEcNoRsKm1ruwEBASYdZ2dtAIdJAQEKgWdnpGa4E7g3AbdroAEk
        kSFwYHcBAS18PyFLrQEBMocAdmABAaE/a7w0ACOtAQFCijxrTDWAAXmxuYsBKahyAHYyAZYBAbqKiKlM
        rgEBuwhCLGcAPBNVvBhcG5VIAAmckgGbfg4BJFIBAYsBAa8hKmwctnhpAAAAAAAAPG0dWAEBAXeFdqIB
        AQEBAQFbcgA0aAEBObKOgXoFkS60WGoBXbMBAWM/NgEBAQEBAbURShwBWRkvASISeYAkAQEBASKMb30B
        QqcBAQEBAQEBARorATcoAEsBAZ2pEgGfF5sBAWUAo2YBAQEBAQEBAQEBAQEBtgBDWAF/Tj8eATUApQEB
        hIdfHAEBAQEBAQEBAQEBAQEWS1U3AU89AHsBWUElHAE3SQEBAQEBAQEBAQEBAQEBAQF3hAEBqTxrRwGJ
        UbZ5AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQGCmWJzAWxJAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAADAA
        AABgAAAAAQAIAAAAAACACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AgICAAEBAQADAwMAAICAgAKCg
        oABgYGAA4ODgABAQEADQ0NAAMDAwALCwsABQUFAAkJCQAHBwcADw8PAACAgIAOjo6ADIyMgAODg4ALi4
        uABISEgAWFhYAJiYmABoaGgAiIiIAHh4eAD4+PgAFxcXANnZ2QApKSkAqampAAQEBAD09PQADAwMAOzs
        7AAbGxsA5OTkACQkJADV1dUAzMzMADQ0NADExMQAPDw8AERERABMTEwAVFRUAKSkpABcXFwAZGRkAJSU
        lACMjIwAdHR0AISEhAD8/PwAExMTAN3d3QAsLCwAvb29ALW1tQCtra0AnZ2dAGtrawB9fX0AAgICAPr6
        +gAGBgYA9vb2AAoKCgDy8vIADg4OAO7u7gAVFRUA6urqABkZGQDm5uYAHR0dAOLi4gAiIiIA29vbACYm
        JgDX19cA09PTAC4uLgDOzs4ANjY2AMrKygA6OjoAxsbGAD4+PgDCwsIAQkJCALu7uwBGRkYASkpKALOz
        swBOTk4AUlJSAKurqwBWVlYAp6enAFpaWgBeXl4AYmJiAJubmwBmZmYAkpKSAG1tbQCOjo4AioqKAP7+
        /gABAQEA/f39AAMDAwD7+/sABQUFAPn5+QAHBwcA9/f3AAkJCQD19fUACwsLAPPz8wANDQ0A8fHxAA8P
        DwDv7+8AERERABISEgDp6ekAFBQUAOfn5wAWFhYA4+PjABoaGgDh4eEAHBwcAN/f3wAfHx8A3t7eACEh
        IQDa2toAIyMjACUlJQDW1tYA1NTUACoqKgArKysA0dHRAC0tLQDPz88ALy8vAMnJyQAzMzMAx8fHADU1
        NQA3NzcAw8PDADk5OQDBwcEAOzs7AL+/vwA9PT0Avr6+AD8/PwC6uroAubm5AENDQwC3t7cAtra2AElJ
        SQCxsbEAS0tLAK+vrwBNTU0Arq6uAE9PTwCsrKwAUVFRAKqqqgBVVVUAV1dXAKOjowBZWVkAoaGhAFtb
        WwCfn58AXV1dAJ6engBfX18AYWFhAJqamgCZmZkAZWVlAJWVlQBnZ2cAk5OTAGlpaQCRkZEAj4+PAG5u
        bgCNjY0Ab29vAIuLiwBxcXEAiYmJAIeHhwB1dXUAhYWFAHd3dwCBgYEAf39/AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEABAEBAQEBAQEFBgEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEABAEBAQEBAQEGCwEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEKAg8PDhABAQEAAgICBAEBAQEBCQQBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQQAsdTUsQkKAQEA
        pdTLAAwBAQEQAAcBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAYqXAQEBAQcNAQEAogEBuwUBAQECCwAI
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQcDAQEAogEBfwAIAQEFBgcCAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBEAwCAwCuAQEAogEBAQCXAQwJAaIJAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEOAACly5cBAQEArgEBrgABAQMCAQEFBgEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQgAyAEBAQEBAQEA
        gAcCCQ8BCACKAQEGCwEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQQAEAEBAQEQAQHUisjUyAEBorsBAQF/
        1H8BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQELDQQEDA0CAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQF/vgsApcuKAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBd3+nGmJcq6utusnIt38QeQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBHE48YXgAeHJBdiFycAB0dgB2A7sIewEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQFVGzgAAHpwckERcCFwIUFyAEFyAAB4wlsBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        U2lRAABDR0F0EQByAAAAAAAAAAAAQXQAAAkOOQEBAQEBAQEBAQEBAQEBAQEBAQEgmnBwQUEjAAB0diVR
        Axa1MRYuXB98AAB0cgBwqLIBAQEBAQEBAQEBAQEBAQEBd8ByAHoAdAAAT7/SzzAVghABAYaCjgxtzV8A
        AHYjABG9dwEBAQEBAQEBAQEBAQF/yX4AdEd6AJQbFXsBAQEBUmXFEwEBAQEBAYwzvAAAAACDyRwBAQEB
        AQEBAQEBARLJdHZBQQA4yZkBAQEBAQgvKol8mjFZAQEBAQEBJMNNeEEAQ8siAQEBAQEBAQEBeQ8jEXYA
        AJMVcwEBAQEBcV4AABF+AEGcOQEBAQEBAQEKlACAQ3hsSAEBAQEBAQFxxyNBQxFyWk4BAQEBAQEBzAAA
        QyN0IXAAGQEBAQEBAQEBJi8hciFF1HMBAQEBAQGejUNFQXCPfQEBAQEBAQEBhwBwQXBBQQByCTcBAQEB
        AQEBAbsAAHIAJ5sBAQEBAQFENUNwQQB6EAEBAQEBAQFEfhFBcHJycHBBfKkBAQEBAQEBpI1FdHojPm8B
        AQEBAQEBjK94dHZFZ3EBAQEBAQGsiwBBdABBQ3AAfmsBAQEBAQGEKkchAHhsHAEBAQEBAQEBAZGdQQkA
        OGABAQEBAQFSgUMAdHRwcCFwI54BAQEBAYJacnIjEQ0IRh4BAQEBAQFKJAEVS3gAIRRQAQEBAQEBTUVw
        ciNyQUMACQEBAQEBgmQjdHQALCkB01g9AQEBAVUX0wEBrHYJcHItTAEBAQEBuQBBcgAhgAB00AEBAQGC
        rUVycgCcWQGkWAAquQEBAVwAUbIBAWWBcgAjn6IBAQEBAdIAAHhycgC4TAEBASuzAEEAAC5VAQFTpXQA
        T8UBZABwh8ABAQG0RSMAAFTGVQEBARA0FHQATUBSAQEB01EAQXIRNYYBAQEBUFZwALKxQwAj0iIBAQEB
        Y3ohgwBBC75gAQEBipKSUgEBd8cUOEMhAIe7ewEV0QEBAb14DwGiAInUIgEBnmUBAamTQUFyAHaLmmbK
        E1VVYDazmB0RAHIAtpcBAWUFJ6YBAXVAigEBbrp1AQFvr4NoNwEor3IAcHAAABFJHYcdJYNDAABDQaGg
        ewEBAVAAdFoTAQF1AQEBb0IBAUJqfkl+ZQEBe9GFRQByIQAAQyEAAABBOIA6u0IBcQEBAXU1AHC+IgEB
        AQEBAQEBexpLAAAtAQEBAQEm0pNLHQl6R4WFjzqjv6oBATcm06k3AQFQSQCYOwEBAQEBAQEBnioAAEtC
        AQFxV5V1AQFb0c3JP9TBWwEBAQEBAUgHAJaCAQF1zh9dAQEBAQEBAQEBRG0dABp1AXMwgI8/UwEBAQEB
        AQEBAQF9iAEBATdsQQC7AQEBfR4BAQEBAQEBAQEBAQHKxAEBAX1cAABFYAEBUmNjokQBAcXEDRABAQE8
        nAAFlwEBAQEBAQEBAQEBAQEBAQF7AQEBAcUAEQA/EAEBGh0dsXkBAQMAABgBAQFxLwAAM28BAQEBAQEB
        AQEBAQEBAQEBAQEBqU0AQ1abAQEBsQBBMgEBAcJFQ14BAQEBbmEaKW8BAQEBAQEBAQEBAQEBAQEBAQEB
        jMVRABlzAQFvSwB0uAEBAc+BQZABAQEBSE4BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQErNBMBAQEBR3Rw
        ZwEBAaclACVbAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBN28BAQGkfnpFZgEBASiluk57AQEB
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQF1EAhusAEBAXEiHAEBAQEBAQEBAQEBAQEBAQEB
        AQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>